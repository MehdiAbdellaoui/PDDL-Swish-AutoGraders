import os
import subprocess
from tqdm import tqdm
import csv

def preprocess_files(directory):

    for filename in tqdm(os.listdir(directory)):
        try:
            with open(os.path.join(directory, filename), "r") as file:
                lines = file.readlines()

            preprocessed_lines = [line for line in lines if "use_rendering" not in line]

            with open(os.path.join(directory, filename), "w") as file:
                file.writelines(preprocessed_lines)

        except Exception as e:
            print(f"Error cleaning file {filename}: {e}")


def run_prolog(prolog_file):
    """
    Run the Prolog file.
    
    Args:
        prolog_file (str): Path to the Prolog file.
    
    Returns:
        string: The solution generated by the Prolog file.
    """
    try:
        # Run SWI-Prolog with the query
        process = subprocess.run(
            ["swipl", "-q", "-s", prolog_file, "-g", "friends(Ls), write(Ls), nl.", "-t", "halt"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        # Capture output and errors
        if process.returncode == 0:
            output = process.stdout.strip()
            result = output if output else f"Error : No output"
        else:
            result = f"Error: {process.stderr.strip()}"

    except Exception as e:
        result = f"Exception: {str(e)}"

    return result

def compare_solutions(student_solution, baseline_solution):
    """
    Compare the student's solution with the baseline solution.
    """
    return student_solution == baseline_solution

def grade_prolog_files(directory, baseline_solution):
    """
    Grades all Prolog files in a directory.

    Args:
        directory (str): Path to the directory containing Prolog files.

    Returns:
        list: Grading results for each student file.
    """
    grades = []
    for filename in tqdm(os.listdir(directory)):
        if filename.endswith(".pl"):
            student = os.path.splitext(filename)[0]
            student_name = student.split("_")[:2]
            student_solution_path = os.path.join(directory, filename)

            student_solution = run_prolog(student_solution_path)

            if student_solution is not None and compare_solutions(student_solution, baseline_solution):
                grades.append([student_name[0], student_name[1], "Pass"])
            else:
                grades.append([student_name[0], student_name[1], "Fail"])

    return grades

def main():
    # Directory containing Prolog files
    prolog_files_directory = "./prolog_submissions"

    baseline_solution_path = "./swish_solution.txt"
    output_csv = "swish_grades.csv"

    # Read the baseline solution
    with open(baseline_solution_path, 'r') as baseline_solution_file:
        baseline_solution = baseline_solution_file.read().strip()

    # Preprocess the files to remove the use_rendering directive
    preprocess_files(prolog_files_directory)

    # Grade files
    results = grade_prolog_files(prolog_files_directory, baseline_solution)

    # Sort the students by their Last Name
    sorted_results = sorted(results, key = lambda x: x[0].lower())

    # Save results to the CSV file 
    with open(output_csv, "w", newline="") as csvfile:
        csv_writer = csv.writer(csvfile)
        csv_writer.writerow(["Last Name", "First Name", "Result"])
        csv_writer.writerows(sorted_results)

    print(f"Grading completed. Results saved to {output_csv}")


if __name__ == "__main__":
    main()
